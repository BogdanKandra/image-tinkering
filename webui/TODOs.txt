- Ajax call properties: url, method, data, success, error, dataType (processData, contentType)
- python os functions:
	- os.access() -- determina daca user-ul are drepturi asupra path-ului
	- os.chdir()  -- schimba cwd-ul pe path-ul dat
	- os.getcwd() -- intoarce calea absoluta a directorului curent



- Voi avea module care fac anumite operatii;
- Fiecare modul are functii de procesare care iau ca argument o imagine si alti parametrii;
- Ca sa aplic o functie asupra unei imagini, trebuie sa:
	- Import dinamic modulul in care se afla functia; (modulul corect e dedus pe baza unui json de configurare);
	- Apelez modul.functie;
- Ca sa adaug o operatie noua in proiect, trebuie sa:
	- Adaug o intrare in json-ul de mapare intre nume de operatii si datele de configurare a functiilor underlying
	- Sa creez un modul nou in care sa pun functia sau sa o pun intr-un modul existent
	- Sa adaptez interfata web pentru ea, acolo unde e necesar (nu va fi nevoie, daca proiectez atent)



- Operation selection screen:
	- La submit, se face un AJAX call care are ca date un obiect de forma:
		{
			'numeImg_i': [
				{
					'function': 'nume functie de apelat, luat pe baza numelui operatiei alese,
					'param_i': 'val_i'
				},
				{
					'function_j': 'Nume',
					'param_i': 'val_i'
				}
			]
		}

	- Pe server, pentru fiecare cheie din obiect, citesc imaginea corespunzatoare si aplic asupra ei toate operatiile selectate, succesiv
	- Functia primeste ca parametri imaginea citita si un dictionar de argumente
	
	
	
- Exemplu:
	- Vreau blur pe imaginea 'flag.png'
	- Selectez din dropdown optiunea 'Blur'
	- Selectez parametrul type ca fiind 'Gaussian'
	- Apoi selectez parametrul de cutoff ca fiind 20% din dimensiunea mai mare a imaginii
	- Dau submit
	- Pe server ajunge un call care are datele
		{
			'flag.png': [{
							'name': 'blur',
							'params': {
								'type': 'gaussian',
								'cutoff': n
							}
						}]
		}


TODOs:
=======================================
- index.html: sa pun functie pe butonul de ACCEPT








