01. http://flask.pocoo.org/docs/1.0/ -- Documentatia Flask
02. https://www.digitalocean.com/community/tutorials/how-to-structure-large-flask-applications -- Organizarea unui proiect de Flask
03. https://semantic-ui.com/ -- Documentatia Semantic UI
04. Despre serializare (pickle) si serializarea fisierelor FFT si RGB
05. Cartea de image processing
06. https://stackoverflow.com/questions/55780834/using-numpy-for-more-efficient-filter-generation -- Intrebarea pusa de mine pentru a eficientiza generarea filtrelor
07. http://www.tannerhelland.com/3643/grayscale-image-algorithm-vb6/ -- Discutie despre algoritmi de conversie la grayscale
08. https://profs.info.uaic.ro/~ancai/DIP/lab/Lab_2_DIP.pdf -- Same
09. https://www.techrepublic.com/blog/how-do-i/how-do-i-convert-images-to-grayscale-and-sepia-tone-using-c/ -- Sepia
10. https://en.wikipedia.org/wiki/ASCII_art?fbclid=IwAR0XKs0ctQay4bZ7U977cf3rTVTOYmNfwuaglTwHjX_w_CCO_HNJOXPp1XY -- ASCII art
11. http://paulbourke.net/dataformats/asciiart/ -- ASCII art


- Sa vorbesc despre json-ul operations.json, structura lui
- La submit, se face un AJAX call care are ca date un obiect de forma:
	{
		'numeImg_i': [
			{
				'function_j': 'nume functie de apelat, luat pe baza numelui operatiei alese,
				'type': 'tipul operatiei, o valoare dintre one-to-one, one-to-many, many-to-one, many-to-many',
				'params': {
					'par_i': val_i
				}
			},
			{
				'function_k': 'Nume',
				'type': 'one-to-one',
				'params': {
					'par_i': val_i
				}
			}
		]
	}



- Negative Filter: Pagina 108 din carte
- Grayscale Filter: Vezi referintele 07 si 08
- Sepia Filter: Vezi referinta 09
- ASCII Filter: Vezi referintele 10 si 11



- Ca sa adaug o operatie noua in proiect, trebuie sa:
	- Adaug o intrare in json-ul de mapare intre nume de operatii si datele de configurare a functiilor underlying
	- Sa creez un modul nou in care sa pun functia sau sa o pun intr-un modul existent
	
- Contractele tipurilor de operatii:
	- one-to-one:   op(image, parameterDictionary), returns one image
	- many-to-one:  op(image, [extra_inputs_list], parameterDictionary), returns one image
	- one-to-many:  op(image, parameterDictionary), returns list of images
	- many-to-many: op(image, [extra_inputs_list], parameterDictionary), returns list of images

- operations.json
	- 'function' -> string obligatoriu, cale catre functia de pe server care aplica operatia;
				 -> este de forma numeDirector.numeScript.numeFunctie
	- 'type'     -> string obligatoriu, tipul de operatie;
				 -> este una dintre cele 4 valori de mai sus
	- 'description' -> string optional, descrierea operatiei, va aparea ca popup
	- 'parameters'  -> o lista de obiecte optionala, fiecare reprezentand configurarea unui parametru
		Configurarea parametrilor:
		- 'name'    -> string obligatoriu, numele parametrului
		- 'type'    -> string obligatoriu, poate avea una dintre valorile: 'range', 'lookup'
		- 'minimum' -> numar obligatoriu daca 'type' = 'range', valoarea minima pe care o poate avea parametrul
		- 'maximum' -> numar obligatoriu daca 'type' = 'range', valoarea maxima pe care o poate avea parametrul
		- 'values'  -> lista obligatorie daca 'type' = 'lookup', lista de valori pe care o poate avea parametrul
		- 'default' -> string optional, valoarea parametrului care va fi preselectata in UI
		- 'presenceDependency' -> string optional, numele unui alt parametru de a carui valoare depinde prezenta acestui parametru in UI
		- 'presenceCondition' -> string obligatoriu daca presenceDependency este prezent, conditia asupra parametrului-dependenta
							  -> e de forma operator|valoare (exemplu '==butterworth'
		- 'description' -> string optional, descrierea parametrului, apare ca popup la hover pe parametru
