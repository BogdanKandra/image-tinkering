01. http://flask.pocoo.org/docs/1.0/ -- Documentatia Flask
02. https://www.digitalocean.com/community/tutorials/how-to-structure-large-flask-applications -- Organizarea unui proiect de Flask
03. https://semantic-ui.com/ -- Documentatia Semantic UI
04. Despre serializare (pickle) si serializarea fisierelor FFT si RGB
05. Cartea de image processing
06. https://stackoverflow.com/questions/55780834/using-numpy-for-more-efficient-filter-generation -- Intrebarea pusa de mine pentru a eficientiza generarea filtrelor
07. http://www.tannerhelland.com/3643/grayscale-image-algorithm-vb6/ -- Discutie despre algoritmi de conversie la grayscale
08. https://profs.info.uaic.ro/~ancai/DIP/lab/Lab_2_DIP.pdf -- Same
09. https://www.techrepublic.com/blog/how-do-i/how-do-i-convert-images-to-grayscale-and-sepia-tone-using-c/ -- Sepia
10. https://en.wikipedia.org/wiki/ASCII_art?fbclid=IwAR0XKs0ctQay4bZ7U977cf3rTVTOYmNfwuaglTwHjX_w_CCO_HNJOXPp1XY -- ASCII art
11. http://paulbourke.net/dataformats/asciiart/ -- ASCII art
12. https://en.wikipedia.org/wiki/Photographic_mosaic -- Photomosaicking
13. https://www.picturemosaics.com/true/ -- Photomosaicking
14. https://www.geeksforgeeks.org/implementing-photomosaics/ -- Photomosaicking
15. https://pdfs.semanticscholar.org/4660/5d83877c33b54d749c7f5f1b1329e2c81a55.pdf -- Photomosaicking
16. https://www.photo-mosaic.co.uk/how-it-works/what-is-a-photo-mosaic/ -- Photomosaicking
17. https://worldwide.espacenet.com/publicationDetails/biblio?CC=US&NR=6137498A&KC=A&FT=D&ND=&date=20001024&DB=&locale=en_EP -- Photomosaicking
18. http://alumni.media.mit.edu/~maov/classes/vision09/lect/09_Image_Filtering_Edge_Detection_09.pdf -- Convolution (Blur, Sharpen, Edge)
19. http://setosa.io/ev/image-kernels/ -- Vizualizare de kernels
20. https://www.researchgate.net/publication/330502797_Image_Processing_Filtering_Edge_detection_and_Template_matching -- Convolution (Theory)
21. https://www.taylorpetrick.com/blog/post/convolution-part3 -- Convolution, kernels
22. http://aishack.in/tutorials/image-convolution-examples/ -- Kernels
23. http://eeweb.poly.edu/~yao/EE3414/image_filtering.pdf -- Filtering, Kernels
24. https://en.wikipedia.org/wiki/Kernel_(image_processing) -- Kernels

- La apasarea butonului de Upload se face un AJAX call care are ca date un obiect de forma:
	{
		'numeImg_i': [
			{
				'function_j': 'nume functie de apelat, luat pe baza numelui operatiei alese,
				'type': 'tipul operatiei, o valoare dintre one-to-one, one-to-many, many-to-one, many-to-many',
				'params': {
					'par_i': val_i
				}
			},
			{
				'function_k': 'Nume',
				'type': 'one-to-one',
				'params': {
					'par_i': val_i
				}
			}
		]
	}

- Structura fisierului de configurare operations.json:
	- 'function' 		 -> string obligatoriu, cale catre functia de pe server care aplica operatia;
						 -> este de forma numeDirector.numeScript.numeFunctie
	- 'type'     		 -> string obligatoriu, tipul de operatie;
						 -> este una dintre cele 4 valori de mai sus
	- 'description' 	 -> string optional, descrierea operatiei, va aparea ca popup
	- 'extraInputsNames' -> lista de strings obligatorie daca 'type' incepe cu 'many-to-', contine denumirile parametrilor suplimentari de input (Exemplu: 'Watermark')
	- 'parameters'  	 -> o lista de obiecte optionala, fiecare reprezentand configurarea unui parametru
		Configurarea parametrilor:
		- 'name'    -> string obligatoriu, numele parametrului
		- 'type'    -> string obligatoriu, poate avea una dintre valorile: 'range', 'lookup'
		- 'minimum' -> numar obligatoriu daca 'type' = 'range', valoarea minima pe care o poate avea parametrul
		- 'maximum' -> numar obligatoriu daca 'type' = 'range', valoarea maxima pe care o poate avea parametrul
		- 'step'    -> pasul cu care se trece de la o valoare la alta in range (optional, default e 1)
		- 'values'  -> lista obligatorie daca 'type' = 'lookup', lista de valori pe care o poate avea parametrul
		- 'default' -> string optional, valoarea parametrului care va fi preselectata in UI
		- 'presenceDependency' -> string optional, numele unui alt parametru de a carui valoare depinde prezenta acestui parametru in UI
		- 'presenceCondition' -> string obligatoriu daca presenceDependency este prezent, conditia asupra parametrului-dependenta
							  -> e de forma operator|valoare (exemplu '==butterworth'
		- 'description' -> string optional, descrierea parametrului, apare ca popup la hover pe parametru
	
- Contractul semnaturilor operatiilor:
	operation(image, extra_inputs_dict, parameters_dict), returns list of images
		- one-to-one: extra_inputs_list = [], returns [image]
		- many-to-one: returns [image]
		- one-to-many: extra_inputs_list = []
	
	- extra_inputs_dict:
		- are ca si cheie numele parametrului extra, asa cum este el precizat in campul 'extraInputsNames' din operations.json
		- are ca si valoare imaginea, ca NumPy array
	
	- parameters_dict:
		- are ca si cheie numele parametrului, asa cum este el precizat in campul 'name' din fiecare element al listei 'parameters' din operation.json
		- are ca si valoare valoarea parametrului

- Ca sa adaug o operatie noua in proiect, trebuie sa:
	- Adaug o intrare in json-ul de mapare intre nume de operatii si datele de configurare a functiilor underlying
	- Sa creez un modul nou in care sa pun functia sau sa o pun intr-un modul existent

- Ca sa adaug un nou set de imagini pentru utilizare la mozaicare, trebuie sa:
	- Toate imaginile trebuie sa aiba aceleasi dimensiuni (mici, de pana in 36x20, daca se doreste raport 16:9) -> permite rezolutiile de 9x5, 18x10 si 36x20 (facem preprocesare la dataset folosind functia preprocess_image_dataset din utils)
	- Le pun intr-un director in backend/miscellaneous/database
	- Creez pickle-ul cu informatii despre dataset, apeland functia pickle_imageset_information
	- Pun optiunea la parametrul 'texture' al operatiei

- Sa vorbesc despre structura serverului - fisiere, module, etc
- Sa vorbesc despre functiile din utils; pentru ce au fost folosite

- Negative Filter: Pagina 108 din carte
- Grayscale Filter: Vezi referintele 07 si 08
- Sepia Filter: Vezi referinta 09
- ASCII Filter: Vezi referintele 10 si 11

- Kintsugi Filter: Edge points detection brute force approach - If the point located in ANY of the adjacent positions is not contained in the polygon, then the current point is on the edge - is much too slow


		


